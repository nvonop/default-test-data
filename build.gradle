import org.apache.tools.ant.taskdefs.condition.Os

ext {
    // The drivers we want to use
    drivers = ["firefox", "chrome"]

    ext {
        groovyVersion = '2.4.10'
        gebVersion = '1.1.1'
        seleniumVersion = '3.3.1'
        chromeDriverVersion = '2.29'
        geckoDriverVersion = '0.15.0'
        spockVersion = '1.1-groovy-2.4-rc-4'
        junitVersion = '4.12'
    }
}

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'
apply plugin: 'idea'
apply from: "gradle/osSpecificDownloads.gradle"

repositories {
    jcenter()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    compile 'com.athaydes:spock-reports:1.2.13'
    testCompile "junit:junit:$junitVersion"
    testCompile "junit:junit-dep:4.8.2"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile "org.gebish:geb-junit4:$gebVersion"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
    }
}

chromeTest() {
    dependsOn unzipChromeDriver
    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
    println('Driver Path::: '+systemProperties["webdriver.chrome.driver"])
    maxParallelForks = 4

    if(project.hasProperty('url')) {
        systemProperty "geb.build.baseUrl", project.property("url").toString()
    }
}

firefoxTest() {
    dependsOn unzipGeckoDriver

    def geckodriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "geckodriver.exe" : "geckodriver"
    systemProperty "webdriver.gecko.driver", new File(unzipGeckoDriver.outputs.files.singleFile, geckodriverFilename).absolutePath
    println('Driver Path::: '+systemProperties["webdriver.gecko.driver"])
    maxParallelForks = 4

    if(project.hasProperty('url')) {
        systemProperty "geb.build.baseUrl", project.property("url").toString()
    }
}


test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

